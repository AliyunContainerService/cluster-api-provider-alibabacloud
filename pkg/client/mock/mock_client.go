// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	ecs "github.com/aliyun/alibaba-cloud-sdk-go/services/ecs"
	vpc "github.com/aliyun/alibaba-cloud-sdk-go/services/vpc"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateInstance mocks base method
func (m *MockClient) CreateInstance(arg0 *ecs.CreateInstanceRequest) (*ecs.CreateInstanceResponse, error) {
	ret := m.ctrl.Call(m, "CreateInstance", arg0)
	ret0, _ := ret[0].(*ecs.CreateInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstance indicates an expected call of CreateInstance
func (mr *MockClientMockRecorder) CreateInstance(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockClient)(nil).CreateInstance), arg0)
}

// RunInstances mocks base method
func (m *MockClient) RunInstances(arg0 *ecs.RunInstancesRequest) (*ecs.RunInstancesResponse, error) {
	ret := m.ctrl.Call(m, "RunInstances", arg0)
	ret0, _ := ret[0].(*ecs.RunInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunInstances indicates an expected call of RunInstances
func (mr *MockClientMockRecorder) RunInstances(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInstances", reflect.TypeOf((*MockClient)(nil).RunInstances), arg0)
}

// DescribeInstances mocks base method
func (m *MockClient) DescribeInstances(arg0 *ecs.DescribeInstancesRequest) (*ecs.DescribeInstancesResponse, error) {
	ret := m.ctrl.Call(m, "DescribeInstances", arg0)
	ret0, _ := ret[0].(*ecs.DescribeInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstances indicates an expected call of DescribeInstances
func (mr *MockClientMockRecorder) DescribeInstances(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstances", reflect.TypeOf((*MockClient)(nil).DescribeInstances), arg0)
}

// StartInstance mocks base method
func (m *MockClient) StartInstance(arg0 *ecs.StartInstanceRequest) (*ecs.StartInstanceResponse, error) {
	ret := m.ctrl.Call(m, "StartInstance", arg0)
	ret0, _ := ret[0].(*ecs.StartInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInstance indicates an expected call of StartInstance
func (mr *MockClientMockRecorder) StartInstance(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstance", reflect.TypeOf((*MockClient)(nil).StartInstance), arg0)
}

// StopInstance mocks base method
func (m *MockClient) StopInstance(arg0 *ecs.StopInstanceRequest) (*ecs.StopInstanceResponse, error) {
	ret := m.ctrl.Call(m, "StopInstance", arg0)
	ret0, _ := ret[0].(*ecs.StopInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopInstance indicates an expected call of StopInstance
func (mr *MockClientMockRecorder) StopInstance(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstance", reflect.TypeOf((*MockClient)(nil).StopInstance), arg0)
}

// DeleteInstance mocks base method
func (m *MockClient) DeleteInstance(arg0 *ecs.DeleteInstanceRequest) (*ecs.DeleteInstanceResponse, error) {
	ret := m.ctrl.Call(m, "DeleteInstance", arg0)
	ret0, _ := ret[0].(*ecs.DeleteInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstance indicates an expected call of DeleteInstance
func (mr *MockClientMockRecorder) DeleteInstance(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockClient)(nil).DeleteInstance), arg0)
}

// DescribeImages mocks base method
func (m *MockClient) DescribeImages(arg0 *ecs.DescribeImagesRequest) (*ecs.DescribeImagesResponse, error) {
	ret := m.ctrl.Call(m, "DescribeImages", arg0)
	ret0, _ := ret[0].(*ecs.DescribeImagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeImages indicates an expected call of DescribeImages
func (mr *MockClientMockRecorder) DescribeImages(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeImages", reflect.TypeOf((*MockClient)(nil).DescribeImages), arg0)
}

// DescribeSecurityGroups mocks base method
func (m *MockClient) DescribeSecurityGroups(arg0 *ecs.DescribeSecurityGroupsRequest) (*ecs.DescribeSecurityGroupsResponse, error) {
	ret := m.ctrl.Call(m, "DescribeSecurityGroups", arg0)
	ret0, _ := ret[0].(*ecs.DescribeSecurityGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSecurityGroups indicates an expected call of DescribeSecurityGroups
func (mr *MockClientMockRecorder) DescribeSecurityGroups(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSecurityGroups", reflect.TypeOf((*MockClient)(nil).DescribeSecurityGroups), arg0)
}

// DescribeRegions mocks base method
func (m *MockClient) DescribeRegions(arg0 *ecs.DescribeRegionsRequest) (*ecs.DescribeRegionsResponse, error) {
	ret := m.ctrl.Call(m, "DescribeRegions", arg0)
	ret0, _ := ret[0].(*ecs.DescribeRegionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegions indicates an expected call of DescribeRegions
func (mr *MockClientMockRecorder) DescribeRegions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegions", reflect.TypeOf((*MockClient)(nil).DescribeRegions), arg0)
}

// DescribeZones mocks base method
func (m *MockClient) DescribeZones(arg0 *ecs.DescribeZonesRequest) (*ecs.DescribeZonesResponse, error) {
	ret := m.ctrl.Call(m, "DescribeZones", arg0)
	ret0, _ := ret[0].(*ecs.DescribeZonesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeZones indicates an expected call of DescribeZones
func (mr *MockClientMockRecorder) DescribeZones(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeZones", reflect.TypeOf((*MockClient)(nil).DescribeZones), arg0)
}

// DescribeDisks mocks base method
func (m *MockClient) DescribeDisks(arg0 *ecs.DescribeDisksRequest) (*ecs.DescribeDisksResponse, error) {
	ret := m.ctrl.Call(m, "DescribeDisks", arg0)
	ret0, _ := ret[0].(*ecs.DescribeDisksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeDisks indicates an expected call of DescribeDisks
func (mr *MockClientMockRecorder) DescribeDisks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeDisks", reflect.TypeOf((*MockClient)(nil).DescribeDisks), arg0)
}

// WaitForInstance mocks base method
func (m *MockClient) WaitForInstance(instanceId, instanceStatus, regionId string, timeout int) error {
	ret := m.ctrl.Call(m, "WaitForInstance", instanceId, instanceStatus, regionId, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForInstance indicates an expected call of WaitForInstance
func (mr *MockClientMockRecorder) WaitForInstance(instanceId, instanceStatus, regionId, timeout interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForInstance", reflect.TypeOf((*MockClient)(nil).WaitForInstance), instanceId, instanceStatus, regionId, timeout)
}

// DescribeVpcs mocks base method
func (m *MockClient) DescribeVpcs(arg0 *vpc.DescribeVpcsRequest) (*vpc.DescribeVpcsResponse, error) {
	ret := m.ctrl.Call(m, "DescribeVpcs", arg0)
	ret0, _ := ret[0].(*vpc.DescribeVpcsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVpcs indicates an expected call of DescribeVpcs
func (mr *MockClientMockRecorder) DescribeVpcs(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVpcs", reflect.TypeOf((*MockClient)(nil).DescribeVpcs), arg0)
}

// DescribeVSwitches mocks base method
func (m *MockClient) DescribeVSwitches(arg0 *vpc.DescribeVSwitchesRequest) (*vpc.DescribeVSwitchesResponse, error) {
	ret := m.ctrl.Call(m, "DescribeVSwitches", arg0)
	ret0, _ := ret[0].(*vpc.DescribeVSwitchesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVSwitches indicates an expected call of DescribeVSwitches
func (mr *MockClientMockRecorder) DescribeVSwitches(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVSwitches", reflect.TypeOf((*MockClient)(nil).DescribeVSwitches), arg0)
}
